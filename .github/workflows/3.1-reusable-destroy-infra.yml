name: CI/CD Infra Reusable Workflow - Destroy

on:
  workflow_call:

    inputs:

      bucket-tf-backend-name:
        required: true
        type: string
      key-tf-backend-name:
        required: true
        type: string
      needs-clean-cloud-resources:
        required: false
        type: boolean
        default: false        

    secrets:

      VULTR_API_KEY:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:

  terraform-execute:
    name: üí£ Terraform execute destroy infra
    runs-on: ubuntu-latest
    env:
      TF_LOG: TRACE
      TF_VAR_VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve -var-file="./environments/terraform.tfvars" -lock=false

      - name: Delete S3 bucket state file contents - [${{ inputs.bucket-tf-backend-name }}/${{ inputs.key-tf-backend-name }}]
        run: |
          aws s3 rm s3://${{ inputs.bucket-tf-backend-name }}/ --recursive
        
  clean-cloud-resources:
    name: üßπ Clean up cloud resources
    needs: terraform-execute
    runs-on: ubuntu-latest

    env:
      SLEEP_TIME_P: 1m
      SLEEP_TIME_M: 2m
      SLEEP_TIME_G: 3m    

    steps:

      - name: ‚åõ Aguardando alguns segundos antes da execucao do proximo passo
        run: sleep ${SLEEP_TIME_P}          

      - name: Clean up Load Balancer in Vultr Cloud
        run: |

          load_balancers_json=$(curl --request GET --url 'https://api.vultr.com/v2/load-balancers' \
            --header 'Authorization: Bearer ${{ secrets.VULTR_API_KEY }}')
          
          if [ "$(echo "$load_balancers_json" | jq '.load_balancers | length')" -eq 0 ]; then
            echo "üòâ N√£o foi encontrado load balancers provisionados no ambiente."
            exit 0
          fi
          
          load_balancer_ids=$(echo $load_balancers_json | jq -r '.load_balancers[] | .id')

          if [[ -z "$load_balancer_ids" ]]; then
            echo "üòâ Nenhum load balancer encontrado para remo√ß√£o."
            exit 0
          fi

          echo "‚úÖ Load balancers encontrados:"
          echo "$load_balancer_ids"

          while read -r load_balancer_id; do
            
            echo "---"
            echo "üî• Removendo load balancer: ${load_balancer_id}"

            response_code=$(curl "https://api.vultr.com/v2/load-balancers/$load_balancer_id" \
              -X DELETE -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" \
              -o /dev/null -w "%{http_code}")

            if [ "$response_code" -eq 204 ]; then
              echo "‚úÖ Load balancer ${load_balancer_id} removido com sucesso."
            else
              echo "‚ùå Falha ao remover o load balancer ${load_balancer_id}. C√≥digo de resposta: $response_code"
            fi

          done <<< "$load_balancer_ids"

          echo "---"
          echo "‚úÖ Processo de remo√ß√£o de load balancers conclu√≠do."
          exit 0 

      - name: ‚åõ Aguardando alguns segundos antes da execucao do proximo passo
        run: sleep ${SLEEP_TIME_G}          

      - name: Clean up Compute instances Vultr Cloud
        run: |

          echo "Remove instancias adicionais criadas pelo processo de auto-scaling do engine vke"

          instances_json=$(curl --request GET --url 'https://api.vultr.com/v2/instances' \
            --header 'Authorization: Bearer ${{ secrets.VULTR_API_KEY }}')
          
          if [ "$(echo "$instances_json" | jq '.instances | length')" -eq 0 ]; then
            echo "üòâ N√£o foi encontrado instancias provisionados no ambiente."
            exit 0
          fi
          
          instances_ids=$(echo $instances_json | jq -r '.instances_json[] | .id')

          if [[ -z "$instances_ids" ]]; then
            echo "üòâ Nenhuma instancia encontrada para remo√ß√£o."
            exit 0
          fi

          echo "‚úÖ Instancias de computacao encontradas:"
          echo "$instances_ids"

          while read -r instance_id; do
            
            echo "---"
            echo "üî• Removendo compute instance: ${instance_id}"

            response_code=$(curl "https://api.vultr.com/v2/instances/$instance_id" \
              -X DELETE -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" \
              -o /dev/null -w "%{http_code}")

            if [ "$response_code" -eq 204 ]; then
              echo "‚úÖ Instancia ${instance_id} removida com sucesso."
            else
              echo "‚ùå Falha ao remover instancia ${instance_id}. C√≥digo de resposta: $response_code"
            fi

          done <<< "$instances_ids"

          echo "---"
          echo "‚úÖ Processo adicional de remo√ß√£o de instancias de computacao conclu√≠do."
          exit 0 

          


