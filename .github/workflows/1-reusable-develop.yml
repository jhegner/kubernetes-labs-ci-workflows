name: CI/CD Develop Workflow

on:
  push:
    branches:
      - develop

  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      cluster-name:
        type: string
        default: "kubernetes-labs-cluster"

    secrets:
      GH_TOKEN:
        required: true
      VULTR_API_KEY:
        required: true

      VULTR_REGISTRY_URN:
        required: true
      VULTR_REGISTRY_USERNAME:
        required: true
      VULTR_REGISTRY_PASSWORD:
        required: true
      VULTR_CONTAINER_REGISTRY_NAME:
        required: true

jobs:
  build-container-image:
    name: 🫙 Build Container Image
    runs-on: ubuntu-latest

    steps:
      # - name: Checkout source code
      #   uses: actions/checkout@v4

      # - name: Docker meta
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ secrets.VULTR_REGISTRY_URN }}/${{ secrets.VULTR_CONTAINER_REGISTRY_NAME }}/${{ inputs.image-name }}
      #     tags: |
      #       type=ref,event=branch
      #       type=ref,event=pr
      #       type=semver,pattern={{version}}
      #       type=semver,pattern={{major}}.{{minor}}.{{patch}}
      #       type=sha

      # - name: Log in to Vultr Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ secrets.VULTR_REGISTRY_URN }}/${{ secrets.VULTR_CONTAINER_REGISTRY_NAME }}
      #     username: ${{ secrets.VULTR_REGISTRY_USERNAME }}
      #     password: ${{ secrets.VULTR_REGISTRY_PASSWORD }}
      #     logout: true

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and Push Docker Image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     # A tag precisa ter o endereco do registry para login e envio senao o docker tenta enviar para o dockerhub
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      - name: Build and Push Docker Image
        run: echo "Build and Push Docker Image step is not configured yet. Please add the necessary steps to build and push the image."

  scan-trivy:
    name: 🐺 Scan container vulnerability com Trivy
    runs-on: ubuntu-latest
    needs: build-container-image

    steps:
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: "${{ secrets.VULTR_REGISTRY_URN }}/${{ secrets.VULTR_CONTAINER_REGISTRY_NAME }}/${{ inputs.image-name }}:develop"
      #     format: "table"
      #     exit-code: "1"
      #   env:
      #     TRIVY_USERNAME: ${{ secrets.VULTR_REGISTRY_USERNAME }}
      #     TRIVY_PASSWORD: ${{ secrets.VULTR_REGISTRY_PASSWORD }}
      - name: Run Trivy vulnerability scanner
        run: echo "Trivy vulnerability scanner is not configured yet. Please add the necessary steps to scan the image."  

  deployment:
    name: ⚙️ Deployment container to kubernetes cluster
    runs-on: ubuntu-latest
    needs: scan-trivy

    steps:
      - name: 🔍 Consulta clusters provisionados
        run: |

          clusters_json=$(curl --request GET --url 'https://api.vultr.com/v2/kubernetes/clusters' \
            --header 'Authorization: Bearer ${{ secrets.VULTR_API_KEY }}')

          if [ "$(echo "$clusters_json" | jq '.vke_clusters | length')" -eq 0 ]; then
            echo "❌ Não foi encontrado clusters provisionados no ambiente."
            exit 1
          fi

          cluster_id=$(echo $clusters_json | jq -r '.vke_clusters[] | select(.label | contains("'${{ inputs.cluster-name }}'")) | .id')

          if [[ -z "$cluster_id" ]]; then
            echo "❌ Não foi encontrado cluster com label 'kubernetes-labs-cluster'."
            exit 1
          fi

          echo "✅ Cluster [$cluster_id] encontrado: $cluster_id"

      - name: 🔍 Consulta container registries provisionados
        run: |

          registries_json=$(curl --request GET --url 'https://api.vultr.com/v2/registries' \
            --header 'Authorization: Bearer ${{ secrets.VULTR_API_KEY }}')              

          if [ "$(echo "$registries_json" | jq '.registries | length')" -eq 0 ]; then
            echo "❌ Não foi encontrado registries provisionados no ambiente."
            exit 1
          fi

          registry_id=$(echo $registries_json | jq -r '.registries[] | select(.name | contains("'${{ secrets.VULTR_CONTAINER_REGISTRY_NAME }}'")) | .id')

          echo "REGISTRY_ID=${registry_id}" >> "$GITHUB_ENV"

          echo "✅ Registry encontrado: ${REGISTRY_ID}"

      - name: 🔑 Gera credenciais temporárias do registry
        run: |
  
          config_json=$(curl --request OPTIONS \
            --url "https://api.vultr.com/v2/registry/$REGISTRY_ID/docker-credentials/kubernetes?expiry_seconds=120&read_write=true&base64_encode=true" \
            --header 'Authorization: Bearer ${{ secrets.VULTR_API_KEY }}')

          kubeconfig_base64=$(echo "$config_json" | jq -r '.yaml_b64')          

          if [[ "$kubeconfig_base64" == "null" || -z "$kubeconfig_base64" ]]; then
            echo "❌ Não foi encontrado configuracoes geradas para kubeconfig."
            exit 1
          fi

          echo "KUBECONFIG_BASE64=${kubeconfig_base64}" >> "$GITHUB_ENV"

          echo "✅ kube_config Base64 obtido com sucesso."

      - name: ⚙️ Configura kubeconfig para acesso ao cluster
        run: |

          mkdir -p ~/.kube        

          echo "${KUBECONFIG_BASE64}" | base64 -d > ~/.kube/config

          chmod 600 ~/.kube/config

          echo "✅ Arquivo kubeconfig criado: ~/.kube/config"

          export KUBECONFIG=~/.kube/config
          source ~/.bashrc
          echo "✅ Contexto configurado"

          kubectl get nodes
          echo "✅ Acesso ao cluster verificado com sucesso."

          echo "✅ Configuração concluída com sucesso!"

      # - name: 🔄 Substitui a imagem gerada para o deployment
      #   run: |

      #     #export IMAGE_NAME="${{ secrets.VULTR_REGISTRY_URN }}/${{ secrets.VULTR_CONTAINER_REGISTRY_NAME }}/${{ inputs.image-name }}
      #     export IMAGE_NAME="ewr.vultrcr.com/kuberneteslabcontainerregistry/kubernetes-labs-app-micronout"
      #     export IMAGE_TAG="develop"

      #     mv infra/kubernetes.yaml infra/kubernetes.yaml.template
      #     envsubst < infra/kubernetes.yaml.template > infra/kubernetes.yaml

      # - name: 🎯 Deploy dos manifestos
      #   run: |
      #     kubectl apply -f infra/kubernetes.yaml

  send-notification:
    name: 📩 Send notification for developers
    runs-on: ubuntu-latest
    needs: deployment

    steps:
      - name: Notificacao Slack
        # adicionar
        run: echo "Notificacao sobre deploy enviada no \#Slack com sucesso"
